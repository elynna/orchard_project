<?xml version='1.0'?>
<%

def getPose(number, x_min, y_min, x_max, y_max, z_mean, diff_min, diff_max)
	anchors = rand((number/5).round..((number/2).round)) # min number of anchors is the equivalent of having clusters of 5
	if anchors == 0
		anchors = 1
	end
	fruit_locations_ = Array.new(number) { Array.new(3) }
	
	# Determine the anchor fruit locations
	(0...anchors).each do |i|
		fruit_locations_[i] = [rand(x_min...x_max), rand(y_min...y_max), z_mean+rand(-0.2..0.2)]
	end
	
	
	assign_to = 0
	anchor_location = Array.new(3)
	# Determine the non-anchor fruit locations
	(anchors..(number-1)).each do |i|
		if anchors > 1
			assign_to = rand(0..(anchors-1))
		else
			assign_to = 0
		end
		anchor_location = fruit_locations_[assign_to]
		fruit_locations_[i] = [anchor_location[0]+rand(diff_min..diff_max), anchor_location[1]+rand(diff_min..diff_max), anchor_location[2]-rand(0..diff_min) ]
	end
	return fruit_locations_

end

row_num = 10
col_num = 10 # number of trees (posts have one more)
row_dist = 1.5 # float
col_dist = 1.0 # float
post_tree_dist = 0.4
vine_num = 0 # number of vines per baseBranch
if row_num < 1
	row_num = 1.0
end
if col_num < 1
	col_num = 1.0
end
if row_dist < 1
	row_dist = 1.0
end	
if col_dist < 0.5
	col_dist = 0.5
end
crossbeam_w = 0.06
crossbeam_h = 0.02
crossbeam_m = 5
post_h = 1.8
post_w = 0.1
wire_length = 0.5
tree_h = 1.8
baseBranch_r = 0.04 # also used as baseBranch radius
baseBranch_m = 10
baseBranch_l = col_dist-crossbeam_w
vine_r = 0.01
vine_m = 5
vine_l = row_dist
vine_z = tree_h + baseBranch_r + vine_r
vine_pitch = Math::PI/2
fruit_num = 500
fruit_mean_z = 1.7
fruit_r = 0.022
fruit_m = 0.05
# diff_min and diff_max specify the limits of how far anchor fruit are from non-anchor fruit in a single cluster
diff_min = fruit_r
diff_max = fruit_r*5
fruit_locations = Array.new()
tree_num = col_num*row_num
tree_locations = Array.new()

(0..row_num*row_dist).step(row_dist).each do |x|
	(post_tree_dist..col_num*col_dist).step(col_dist).each do |y|
		tree_locations.push([x, y])
	end
end
%>

<sdf version='1.4'>
  <model name="pergola">
	<% # Place grid of pergola posts %>
  <%
	counter = 0
	(0..(row_num-1)*row_dist).step(row_dist).each do |x|
		(0..col_num*col_dist).step(col_dist).each do |y|
  %>
		<include>
			<name>post_<%= counter %></name>
			<pose><%= x %> <%= y %> 0 0 0 0</pose>
			<uri>model://post</uri>
		</include>	
		<% counter += 1
		end
    end %>
    
	<% # Create crossbeams across columns of posts %>
  <%
	counter = 0
	((row_dist/2)..(row_num-2)*row_dist+(row_dist/2)).step(row_dist).each do |x|
		(0..col_num*col_dist).step(col_dist).each do |y|
  %>
    <link name="beam_<%= counter %>">
      <pose><%= x %> <%= y %> <%= post_h+crossbeam_h/2 %> 0 0 0</pose>
      <collision name="collision">
        <geometry><box><size><%= row_dist %> <%= crossbeam_w %> <%= crossbeam_h %></size></box></geometry>
      </collision>
      <visual name="visual">
        <geometry><box><size><%= row_dist %> <%= crossbeam_w %> <%= crossbeam_h %></size></box></geometry>
        <material><script><name>Gazebo/Wood</name></script></material>
      </visual>
    <inertial>
      <pose>0 0 0 0 0 0</pose>
      <mass><%= crossbeam_m %></mass>
      <inertia>
        <ixx><%= crossbeam_m*(crossbeam_w*crossbeam_w+crossbeam_h*crossbeam_h)/12 %></ixx><ixy>0.0</ixy><ixz>0.0</ixz><iyy><%= crossbeam_m*(crossbeam_w*crossbeam_w+row_dist*row_dist)/12 %></iyy><iyz>0.0</iyz><izz><%= crossbeam_m*(row_dist*row_dist+crossbeam_h*crossbeam_h)/12 %></izz>
      </inertia>
    </inertial>
    </link>
		<% counter += 1
		end
    end %>
    
	<% # Place grid of trees between posts (each tree at a fixed distance from posts) %>
  <%
	counter = 0
	(0..tree_num-1).each do |i|
  %>
		<include>
			<name>tree_<%= counter %></name>
			<pose><%= tree_locations[i][0] %> <%= tree_locations[i][1] %> 0 0 0 0</pose>
			<uri>model://tree_trunk</uri>
		</include>	
		<% counter += 1
    end %>
    
	<% # Create base branches along rows of trees. (Base branches are equivalent to the trunk growing horizontally along pergola) %>
  <%
	counter = 0
	(0..(row_num-1)*row_dist).step(row_dist).each do |x|
		((col_dist/2)..(col_num)*col_dist).step(col_dist).each do |y|
  %>
    <link name="baseBranch_<%= counter %>">
      <pose><%= x %> <%= y %> <%= tree_h %> <%= Math::PI/2 %> 0 0</pose>
      <collision name="collision">
        <geometry><cylinder><radius><%= baseBranch_r %></radius> <length><%= baseBranch_l %></length></cylinder></geometry>
      </collision>
      <visual name="visual">
        <geometry><cylinder><radius><%= baseBranch_r %></radius> <length><%= baseBranch_l %></length></cylinder></geometry>
        <material><script><name>Gazebo/WoodFloor</name></script></material>
      </visual>
    <inertial>
      <pose>0 0 0 0 0 0</pose>
      <mass><%= baseBranch_m %></mass>
      <inertia>
        <ixx><%= baseBranch_m*(3*baseBranch_r*baseBranch_r+baseBranch_l*baseBranch_l)/12 %></ixx><ixy>0.0</ixy><ixz>0.0</ixz><iyy><%= baseBranch_m*(3*baseBranch_r*baseBranch_r+baseBranch_l*baseBranch_l)/12 %></iyy><iyz>0.0</iyz><izz><%= baseBranch_m*baseBranch_r*baseBranch_r/2 %></izz>
      </inertia>
    </inertial>
    </link>
		<% counter += 1
		end
    end %>
    
	<% # Create vines/branches that stretch across the columns of tree trunks %>
  <%
  if vine_num != 0
	counter = 0
	((row_dist/2)..(row_num-1)*row_dist).step(row_dist).each do |x|
		((crossbeam_w/2)...(col_num)*col_dist).step(col_dist/vine_num).each do |y|
  %>
    <link name="vine_<%= counter %>">
      <pose><%= x %> <%= y %> <%= vine_z %> 0 <%= vine_pitch %> 0</pose>
      <collision name="collision">
        <geometry><cylinder><radius><%= vine_r %></radius> <length><%= vine_l %></length></cylinder></geometry>
      </collision>
      <visual name="visual">
        <geometry><cylinder><radius><%= vine_r %></radius> <length><%= vine_l %></length></cylinder></geometry>
        <material><script><name>Gazebo/WoodFloor</name></script></material>
      </visual>
    <inertial>
      <pose>0 0 0 0 0 0</pose>
      <mass><%= vine_m %></mass>
      <inertia>
        <ixx><%= vine_m*(3*vine_r*vine_r+vine_l*vine_l)/12 %></ixx><ixy>0.0</ixy><ixz>0.0</ixz><iyy><%= vine_m*(3*vine_r*vine_r+vine_l*vine_l)/12 %></iyy><iyz>0.0</iyz><izz><%= vine_m*vine_r*vine_r/2 %></izz>
      </inertia>
    </inertial>
    </link>
    
    </link>
		<% counter += 1
		end
	  end
    end %>
    

    
  </model>
</sdf>
