<?xml version='1.0'?>
<% 
# This ERB template file creates the gazebo SDF model of the pergola structure.
# Components of this pergola model include:
# Posts, crossbeams, trees (trunks and base branches that are used to anchor the vines), vines, a canopy, and fruit.
# To use a model that is unpopulated (i.e. including all the above components except fruit), see pergola_unpopulated.

# Basic parameters for pergola structure. 
row_num = 3 # number of rows of trees
col_num = 5 # number of columns of trees (posts have one more)
row_dist = 3 # distance between rows
col_dist = 1.2 # distance between columns
post_tree_dist = 0.6 # distance between each post and tree
fruit_num = 500 # number of fruit in the canopy
vine_num = 4 # number of vines per baseBranch
tiled_canopy = true
# The following correspond to the leaf model
leaf_size = 1
canopy_h = 0.3

# Ensure that there is at least 2 rows and 1 column of trees
if row_num < 2
	row_num = 2
end
if col_num < 1
	col_num = 1
end
# Ensure that the distance between rows and columns are plausible (above minimum) and float values
if row_dist < 1
	row_dist = 1.0
end	
if col_dist < 1
	col_dist = 1.0
end
row_dist = row_dist.to_f
col_dist = col_dist.to_f

# Crossbeam parameters
crossbeam_w = 0.06
crossbeam_h = 0.02
crossbeam_m = 5
# Post parameters
post_h = 1.8
post_w = 0.1
# Tree/branch parameters
tree_h = 1.8
tree_num = col_num*row_num
tree_locations = Array.new()
baseBranch_r = 0.04
baseBranch_m = 10
baseBranch_l = col_dist
# Vine parameters
vine_h = 0.05
vine_r = 0.01
vine_l = Math.sqrt((row_dist/2)*(row_dist/2) + vine_h*vine_h)
vine_m = 5
vine_z = tree_h
vine_pitch = Math::atan2((row_dist/2),vine_h)
# Fruit parameters
fruit_mean_z = 1.7
fruit_r = 0.022
fruit_m = 0.05
# diff_min and diff_max specify the limits of how far anchor fruit are from non-anchor fruit in a single cluster
diff_min = fruit_r
diff_max = fruit_r*5
fruit_locations = Array.new()

# Canopy variables
x_overhang = 0.0
y_overhang = 0.0
canopy_z = tree_h + canopy_h/2 #tree_h + baseBranch_r + vine_h + canopy_h/2
%>
<%
# Function to get the pose of the fruit (or flowers) within the pergola structure grid.
def getPose(number, x_min, y_min, x_max, y_max, z_mean, diff_min, diff_max)
	anchors = rand((number/5).round..((number/2).round)) # min number of anchors is the equivalent of having clusters of 5
	if anchors == 0
		anchors = 1
	end
	
	# Array to store the fruit locations (location is given by a 3-element array of x, y, z positions within the global gazebo frame.)
	fruit_locations_ = Array.new(number) { Array.new(3) }
	
	# Determine the anchor fruit locations
	(0..(anchors-1)).each do |i|
		fruit_locations_[i] = [rand(x_min...x_max), rand(y_min...y_max), z_mean+rand(-0.15..0.15)]
	end
	
	# Determine the non-anchor fruit locations
	# Assign each non-anchor fruit to an anchor.
	assign_to = 0
	
	# Temp array to store the location of the anchor in a cluster.
	anchor_location = Array.new(3)
	
	# Iterate through the non-anchor fruits, randomly assign each to an anchor, and determine the new fruit location within a cluster range.
	(anchors..(number-1)).each do |i|
		if anchors > 1
			assign_to = rand(0..(anchors-1))
		else
			assign_to = 0
		end
		anchor_location = fruit_locations_[assign_to]
		fruit_locations_[i] = [anchor_location[0]+rand(diff_min..diff_max), anchor_location[1]+rand(diff_min..diff_max), anchor_location[2]-rand(0..diff_min) ]
	end
	return fruit_locations_
end
%>
<!-- This file contains a model for the pergola structure in the orchard and includes:
<%= row_num*(col_num+1) %> posts, <%= (row_num-1)*(col_num+1) %> crossbeams, <%= row_num*col_num %> trees, <%= row_num*col_num*vine_num %> vines, and <%= fruit_num %> fruit. -->
<sdf version='1.4'>
  <model name="pergola">
	<% # Place grid of pergola posts %>
	<!-- Posts -->
  <%
	counter = 0
	(0..(row_num-1)*row_dist).step(row_dist).each do |x|
		(0..col_num*col_dist).step(col_dist).each do |y|
  %>
		<include>
			<name>post_<%= counter %></name>
			<pose><%= x %> <%= y %> 0 0 0 0</pose>
			<uri>model://post</uri>
		</include>	
		<% counter += 1
		end
    end %>
    
	<% # Create crossbeams across columns of posts %>
	<!-- Crossbeams -->
  <%
	counter = 0
	((row_dist/2)..(row_num-2)*row_dist+(row_dist/2)).step(row_dist).each do |x|
		(0..col_num*col_dist).step(col_dist).each do |y|
  %>
    <link name="beam_<%= counter %>">
      <pose><%= x %> <%= y %> <%= post_h+crossbeam_h/2 %> 0 0 0</pose>
      <collision name="collision">
        <geometry><box><size><%= row_dist %> <%= crossbeam_w %> <%= crossbeam_h %></size></box></geometry>
      </collision>
      <visual name="visual">
        <geometry><box><size><%= row_dist %> <%= crossbeam_w %> <%= crossbeam_h %></size></box></geometry>
        <material><script><uri>model://post/materials/scripts</uri>
            <uri>model://post/materials/textures</uri>
            <name>Post/Wood</name></script></material>
      </visual>
    <inertial>
      <pose>0 0 0 0 0 0</pose>
      <mass><%= crossbeam_m %></mass>
      <inertia>
        <ixx><%= crossbeam_m*(crossbeam_w*crossbeam_w+crossbeam_h*crossbeam_h)/12 %></ixx><ixy>0.0</ixy><ixz>0.0</ixz><iyy><%= crossbeam_m*(crossbeam_w*crossbeam_w+row_dist*row_dist)/12 %></iyy><iyz>0.0</iyz><izz><%= crossbeam_m*(row_dist*row_dist+crossbeam_h*crossbeam_h)/12 %></izz>
      </inertia>
    </inertial>
    </link>
		<% counter += 1
		end
    end %>
    
	<% # Place grid of trees between posts (each tree at a fixed distance from posts) %>
	<!-- Tree trunks -->
  <%
  # Determine tree locations
	(0..row_num*row_dist).step(row_dist).each do |x|
		(post_tree_dist..col_num*col_dist).step(col_dist).each do |y|
			tree_locations.push([x, y])
		end
	end
	counter = 0
	(0..tree_num-1).each do |i|
  %>
		<include>
			<name>tree_<%= counter %></name>
			<pose><%= tree_locations[i][0] %> <%= tree_locations[i][1] %> 0 0 0 0</pose>
			<uri>model://tree_trunk</uri>
		</include>	
		<% counter += 1
    end %>
    
	<% # Create base branches along rows of trees. (Base branches are equivalent to the trunk growing horizontally along pergola) %>
	<!-- Base branches along rows of trees. (Base branches are similar to the trunk growing horizontally along pergola) -->
  <%
	counter = 0
	(0..(row_num-1)*row_dist).step(row_dist).each do |x|
		((col_dist/2)..(col_num)*col_dist).step(col_dist).each do |y|
  %>
    <link name="baseBranch_<%= counter %>">
      <pose><%= x %> <%= y %> <%= tree_h %> <%= Math::PI/2 %> 0 0</pose>
      <collision name="collision">
        <geometry><cylinder><radius><%= baseBranch_r %></radius> <length><%= baseBranch_l %></length></cylinder></geometry>
      </collision>
      <visual name="visual">
        <geometry><cylinder><radius><%= baseBranch_r %></radius> <length><%= baseBranch_l %></length></cylinder></geometry>
        <material><script><uri>model://tree_trunk/materials/scripts</uri>
            <uri>model://tree_trunk/materials/textures</uri>
            <name>Tree/Bark</name></script></material>
      </visual>
    <inertial>
      <pose>0 0 0 0 0 0</pose>
      <mass><%= baseBranch_m %></mass>
      <inertia>
        <ixx><%= baseBranch_m*(3*baseBranch_r*baseBranch_r+baseBranch_l*baseBranch_l)/12 %></ixx><ixy>0.0</ixy><ixz>0.0</ixz><iyy><%= baseBranch_m*(3*baseBranch_r*baseBranch_r+baseBranch_l*baseBranch_l)/12 %></iyy><iyz>0.0</iyz><izz><%= baseBranch_m*baseBranch_r*baseBranch_r/2 %></izz>
      </inertia>
    </inertial>
    </link>
		<% counter += 1
		end
    end %>
    
	<% # Create vines/branches that stretch across the base branches. %>
	<!-- Vines across base branches. Vines consist of an ascending and descending portion to simulate a raised canopy. -->
  <%
	counter = 0
	((row_dist/4)..(row_num-1)*row_dist).step(row_dist).each do |x|
		((crossbeam_w/2)...(col_num)*col_dist).step(col_dist/vine_num).each do |y|
  %>
    <link name="vine_<%= counter %>">
      <pose><%= x %> <%= y %> <%= tree_h + baseBranch_r + vine_r %> 0 <%= vine_pitch %> 0</pose>
      <collision name="collision">
        <geometry><cylinder><radius><%= vine_r %></radius> <length><%= vine_l %></length></cylinder></geometry>
      </collision>
      <visual name="visual">
        <geometry><cylinder><radius><%= vine_r %></radius> <length><%= vine_l %></length></cylinder></geometry>
        <material><script><uri>model://tree_trunk/materials/scripts</uri>
            <uri>model://tree_trunk/materials/textures</uri>
            <name>Tree/Bark</name></script></material>
      </visual>
    <inertial>
      <pose>0 0 0 0 0 0</pose>
      <mass><%= vine_m %></mass>
      <inertia>
        <ixx><%= vine_m*(3*vine_r*vine_r+vine_l*vine_l)/12 %></ixx><ixy>0.0</ixy><ixz>0.0</ixz><iyy><%= vine_m*(3*vine_r*vine_r+vine_l*vine_l)/12 %></iyy><iyz>0.0</iyz><izz><%= vine_m*vine_r*vine_r/2 %></izz>
      </inertia>
    </inertial>
    </link>
    
    <% counter += 1 %>
    <link name="vine_<%= counter %>">
      <pose><%= x + row_dist/2 %> <%= y %> <%= tree_h + baseBranch_r + vine_r %> 0 <%= -(vine_pitch) %> 0</pose>
      <collision name="collision">
        <geometry><cylinder><radius><%= vine_r %></radius> <length><%= vine_l %></length></cylinder></geometry>
      </collision>
      <visual name="visual">
        <geometry><cylinder><radius><%= vine_r %></radius> <length><%= vine_l %></length></cylinder></geometry>
        <material><script><uri>model://tree_trunk/materials/scripts</uri>
            <uri>model://tree_trunk/materials/textures</uri>
            <name>Tree/Bark</name></script></material>
      </visual>
    <inertial>
      <pose>0 0 0 0 0 0</pose>
      <mass><%= vine_m %></mass>
      <inertia>
        <ixx><%= vine_m*(3*vine_r*vine_r+vine_l*vine_l)/12 %></ixx><ixy>0.0</ixy><ixz>0.0</ixz><iyy><%= vine_m*(3*vine_r*vine_r+vine_l*vine_l)/12 %></iyy><iyz>0.0</iyz><izz><%= vine_m*vine_r*vine_r/2 %></izz>
      </inertia>
    </inertial>
    </link>
		<% counter += 1
		end
    end %>
    
 	<% # Create a visual canopy using one model link. 
		# To configure the tiled canopy that has more detail (including size/shape), see 'canopy' model. %>
	<!-- Canopy visual that stretches across pergola structure. -->
  <%
	if tiled_canopy == true
		x_overhang = (leaf_size - ((row_num-1)*row_dist)%leaf_size)/2 if (row_num*row_dist)%leaf_size != 0
		y_overhang = (leaf_size - (col_num*col_dist)%leaf_size)/2 if (col_num*col_dist)%leaf_size != 0
		((leaf_size/2.0)..(row_num-1)*row_dist+leaf_size/2).step(leaf_size).each do |x|
			((leaf_size/2.0)..(col_num)*col_dist+leaf_size/2).step(leaf_size).each do |y|
  %>
			<include>
				<pose><%= x - x_overhang %> <%= y - y_overhang %> <%= canopy_z %> 0 0 0</pose>
				<uri>model://leaf</uri>
			</include>	
			<%
			end
		end
    else %>
		 <link name="canopy">
          <pose><%= (row_num-1)*row_dist/2 %> <%= col_num*col_dist/2%> <%= canopy_z %> 0 0 0</pose>
          <visual name="visual">
            <geometry><box><size><%= (row_num-1)*row_dist %> <%= col_num*col_dist%> <%= canopy_h %></size></box></geometry>
            <material><script><uri>model://leaf/materials/scripts</uri>
            <uri>model://leaf/materials/textures</uri>
            <name>Leaf/Single</name></script></material>
          </visual>
        </link>
    <% end %> 
    
	<% # Place fruit models in pergola %>
	<!-- Kiwifruit - currently modelled by red spheres for simplicity. Texture can be changed, however increasing the complexity will affect loading the world in Gazebo.
		If the world is too large with the fruit models, use unpopulated_pergola and spawn the fruit models separately (fruit_population).-->
  <%
	fruit_locations = getPose(fruit_num, (post_w/2), (post_w/2), (row_num-1)*row_dist-(post_w/2), (col_num)*col_dist-(post_w/2), fruit_mean_z, diff_min, diff_max)
	counter = 0
	(0...fruit_num).each do |i|	
  %>
		<link name="fruit_<%= counter %>">
		  <pose><%= fruit_locations[i][0] %> <%= fruit_locations[i][1] %> <%= fruit_locations[i][2] - fruit_r %> 0 0 0</pose>
		  <collision name="fruit_collision_<%= counter %>">
			<geometry><sphere><radius><%= fruit_r %></radius></sphere></geometry>
		  </collision>
		  <visual name="visual">
			<geometry><sphere><radius><%= fruit_r %></radius></sphere></geometry>
			<material><script><name>Gazebo/Red</name></script></material>
		  </visual>
		<inertial>
		  <pose>0 0 0 0 0 0</pose>
		  <mass><%= fruit_m %></mass>
		  <inertia>
			<ixx><%= 2*fruit_m*fruit_r*fruit_r/5 %></ixx><ixy>0.0</ixy><ixz>0.0</ixz><iyy><%= 2*fruit_m*fruit_r*fruit_r/5 %></iyy><iyz>0.0</iyz><izz><%= 2*fruit_m*fruit_r*fruit_r/5 %></izz>
		  </inertia>
		</inertial>
		<!-- Sensor for any contact with fruit -->
		<sensor name='fruit_contact_<%= counter %>' type='contact'>
	      <plugin name="contact_plugin_<%= counter %>" filename="libcontact_plugin.so"/>
		  <contact>
			<collision>fruit_collision_<%= counter %></collision><topic>fruit_contact_topic_<%= counter %></topic>
		  </contact>
		</sensor>		
		</link>
		<% counter += 1
    end %>
  </model>
</sdf>
